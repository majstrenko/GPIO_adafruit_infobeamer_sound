#!/usr/bin/python2.7
from hosted import device, node, config, time, threading
config.restart_on_update()

device.gpio.monitor(config.pin_16)
device.gpio.monitor(config.pin_17)
device.gpio.monitor(config.pin_18)
device.gpio.monitor(config.pin_19)

sixteen_is_on = False
seventeen_is_on = False
eighteen_is_on = False
nineteen_is_on = False

def handle_pin_16(state):
    global sixteen_is_on
    if not sixteen_is_on:
        sixteen_is_on = True
        print("pin 16 touched")
        node.send('/state:%d' % state)
        time.sleep(20)
        sixteen_is_on = False

def handle_pin_17(state):
    global seventeen_is_on
    if not seventeen_is_on:
        seventeen_is_on = True
        print("pin 17 touched")
        node.send('/state:%d' % state)
        time.sleep(20)
        seventeen_is_on = False

def handle_pin_18(state):
    global eighteen_is_on
    if not eighteen_is_on:
        eighteen_is_on = True
        print("pin 18 touched")
        node.send('/state:%d' % state)
        time.sleep(20)
        eighteen_is_on = False

def handle_pin_19(state):
    global nineteen_is_on
    if not nineteen_is_on:
        nineteen_is_on = True
        print("pin 19 touched")
        node.send('/state:%d' % state)
        time.sleep(20)
        nineteen_is_on = False

def gpio_poll_loop():
    for pin, state in device.gpio.poll_forever():
        if state == 1:
            if pin == 16:
                threading.Thread(target=handle_pin_16, args=(state,)).start()
            elif pin == 17:
                threading.Thread(target=handle_pin_17, args=(state,)).start()
            elif pin == 18:
                threading.Thread(target=handle_pin_18, args=(state,)).start()
            elif pin == 19:
                threading.Thread(target=handle_pin_19, args=(state,)).start()

# Start the GPIO polling loop in a separate thread
gpio_poll_thread = threading.Thread(target=gpio_poll_loop)
gpio_poll_thread.start()
